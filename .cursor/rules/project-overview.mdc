---
description: 
globs: 
alwaysApply: true
---
# Vision CMS Extension Project Overview

This document provides a comprehensive overview of the Vision CMS Extension project, intended for onboarding developers or providing context to an LLM assistant.

## 1. Project Goal

The primary goal of this project is to create a Chrome extension that allows users to:
1.  Select a specific area of a webpage.
2.  Capture a screenshot of the selected area.
3.  Send the screenshot to a backend server for processing (cropping) and AI-powered analysis using the Anthropic Claude API.
4.  View the captured image and analysis results within the Chrome side panel.
5.  Engage in a chat interface, potentially using the captured image as context.
6.  Interact with a Contentstack CMS instance (via backend tools).

## 2. Architecture

This project follows a client-server architecture:

*   **Client:** A Chrome Extension built using Manifest V3.
*   **Server:** A Node.js/Express backend application responsible for image processing, AI interaction, and potentially CMS integration.

### 2.1. Chrome Extension (Client)

*   **Manifest Version:** V3
*   **Core Components:**
    *   **Background Script (Service Worker):** `dist/background.js` (compiled from `src/background.ts`)
        *   Handles communication between different extension parts (content script, side panel).
        *   Manages extension state (e.g., selection mode active).
        *   Proxies requests to the backend server (`/process-image`, `/analyze-image`, `/chat`).
        *   Handles Chrome APIs (`storage`, `sidePanel`, `scripting`, `commands`, `alarms`, `tabs`, `action`, `runtime`).
        *   Manages predefined and custom analysis prompts.
        *   Includes logic to avoid running on restricted `chrome://` or webstore URLs.
    *   **Content Script:** `dist/content.js` & `dist/content.css` (compiled from `src/content.ts`)
        *   Injected into all web pages (`<all_urls>`).
        *   Manages the UI for selecting a portion of the page (draws an overlay).
        *   Listens for messages from the background script/side panel to start or cancel selection.
        *   Sends selection coordinates back upon completion.
        *   Handles cancellation if the tab's visibility changes.
    *   **Side Panel:** `dist/sidepanel.html` & `dist/sidepanel.js` (compiled from `src/sidepanel.ts`)
        *   Provides the main user interface within the Chrome side panel.
        *   Displays captured images and AI analysis results (using `marked` for Markdown).
        *   Allows users to toggle selection mode.
        *   Presents predefined prompts and allows custom prompts for analysis.
        *   Includes a chat interface (`#chat-interface`).
        *   Maintains a history of captured images and their analyses (`Capture` interface).
        *   Communicates with the background script to initiate actions (capture, analyze, chat).
    *   **Manifest:** `manifest.json`
        *   Defines permissions: `activeTab`, `storage`, `sidePanel`, `scripting`, `commands`, `alarms`.
        *   Host permissions: `<all_urls>`.
        *   Declares background service worker, content scripts, side panel default path, browser action, icons, and keyboard commands (`reload`, `_execute_action`).
        *   Specifies `web_accessible_resources`.
    *   **Utilities:** `src/utils.ts`
        *   Provides shared functions, such as logging utilities (`createBackgroundLogger`, `createContentLogger`, `createSidePanelLogger`).

### 2.2. Backend Server

*   **Location:** `server/` directory.
*   **Framework:** Node.js / Express (`server/server.js`).
*   **Configuration:** Uses `.env` file for sensitive keys (Anthropic API Key, Contentstack API Key, Management Token) and configuration (Port, Contentstack Host/Region).
*   **Key Dependencies:** `express`, `cors`, `multer`, `sharp`, `dotenv`, `@anthropic-ai/sdk`, `@contentstack/management`.
*   **Functionality:**
    *   Provides API endpoints for the Chrome extension.
    *   `/process-image` (POST): Receives image file upload + selection coordinates + DPR. Uses `multer` for upload (temp storage in `server/uploads/`) and `sharp` to crop the image based on coordinates. Saves the final cropped image to `server/public/` and returns its public URL (`/images/...`).
    *   `/analyze-image` (POST, inferred): Likely takes an image URL and prompt, communicates with the Anthropic API for analysis.
    *   `/chat` (POST, inferred): Manages chat interactions, potentially sending image context and user messages to the Anthropic API. Supports tool usage with Anthropic (defined tools for Contentstack: `get_content_type`, `get_content_types`).
    *   Serves static files (processed images) from `server/public/` via the `/images` route.
    *   Initializes and uses the Contentstack Management SDK.

## 3. Project Structure

```
.
├── .cursor/            # Cursor AI configuration
├── .git/               # Git repository data
├── .vscode/            # VS Code settings
├── dist/               # Build output (compiled extension files)
├── node_modules/       # Root project dependencies
├── public/             # Static assets for the extension (HTML, CSS, icons)
│   ├── icons/
│   ├── sidepanel.html
│   └── content.css
├── scripts/            # Build-related scripts
│   ├── copy-assets.js
│   └── generate-icons.js
├── server/             # Backend Node.js server application
│   ├── node_modules/   # Server dependencies
│   ├── public/         # Static files served by the server (processed images)
│   ├── uploads/        # Temporary storage for uploads (via multer)
│   ├── .env            # Environment variables (API keys, etc.) - **DO NOT COMMIT**
│   ├── .gitignore
│   ├── package.json    # Server dependencies and scripts
│   ├── package-lock.json
│   ├── README.md       # Server-specific documentation
│   └── server.js       # Main server application logic
├── src/                # Extension source code (TypeScript)
│   ├── background.ts
│   ├── content.ts
│   ├── sidepanel.ts
│   ├── sidepanel.css
│   └── utils.ts
├── .DS_Store           # macOS metadata file
├── .gitignore          # Git ignore rules
├── biome.json          # Biome linter/formatter configuration
├── llms.txt            # LLM model documentation
├── manifest.json       # Chrome extension manifest
├── package.json        # Root project dependencies and scripts
├── package-lock.json
├── README.md           # Main project documentation
├── tsconfig.json       # TypeScript configuration
└── webpack.config.js   # Webpack build configuration
```

## 4. Build Process

*   **Bundler:** Webpack (`webpack.config.js`)
*   **Compiler:** TypeScript (`ts-loader`, `tsconfig.json`)
*   **Workflow:**
    1.  TypeScript files in `src/` (`background.ts`, `content.ts`, `sidepanel.ts`) are compiled and bundled into JavaScript files in `dist/`.
    2.  Webpack is configured for development mode with inline source maps.
    3.  The `scripts/copy-assets.js` script (run via `npm run copy-assets` as part of the build) likely copies static files from `public/` (e.g., `sidepanel.html`, `*.css`, `icons/`) to the `dist/` directory.
    4.  The `scripts/generate-icons.js` (run via `npm run generate-icons` as part of `prebuild`) likely generates necessary icon sizes.
*   **Key Scripts (`package.json`):**
    *   `npm run build`: Executes the full build process (icons, webpack, asset copying).
    *   `npm run watch`: Runs webpack in watch mode for development.
    *   `npm run lint`/`format`/`check`: Runs Biome for code quality.

## 5. Key Dependencies

*   **Extension (`package.json`):**
    *   `@types/*`: Type definitions for Chrome, Node, etc.
    *   `html2canvas`: Likely used for capturing the webpage area (though usage wasn't explicitly seen in the snippets read).
    *   `marked`: Used in the side panel to render Markdown responses from the AI.
    *   `uuid`: Generating unique IDs (e.g., for captures).
    *   `typescript`, `ts-loader`, `webpack`, `webpack-cli`: Build toolchain.
    *   `@biomejs/biome`: Linting/formatting.
    *   `@contentstack/management`: (Potentially misplaced, seems more relevant to the server).
*   **Server (`server/package.json`):**
    *   `express`: Web framework.
    *   `cors`: Handling Cross-Origin Resource Sharing.
    *   `multer`: Handling file uploads.
    *   `sharp`: High-performance image processing (cropping).
    *   `dotenv`: Loading environment variables.
    *   `@anthropic-ai/sdk`: Interacting with the Anthropic (Claude) API.
    *   `@contentstack/management`: Interacting with the Contentstack CMS Management API.
    *   `uuid`: Generating unique IDs (e.g., for filenames).

## 6. Setup and Running

*   **Extension:**
    1.  Run `npm install` in the root directory.
    2.  Run `npm run build`.
    3.  Load the `dist/` directory as an unpacked extension in Chrome (`chrome://extensions`).
*   **Server:**
    1.  Navigate to the `server/` directory (`cd server`).
    2.  Run `npm install`.
    3.  Create a `.env` file based on `.env.example` (if available) or the required variables listed in `server.js` (ANTHROPIC_API_KEY, CONTENTSTACK_API_KEY, CONTENTSTACK_MANAGEMENT_TOKEN, etc.).
    4.  Run `node server.js` (or configure a script like `npm start` in `server/package.json`).

## 7. Notes for LLM

*   The project uses TypeScript extensively.
*   Functional programming patterns are preferred (as per `dev-role.mdc`).
*   Error handling and logging (`src/utils.ts`) are implemented in client-side scripts.
*   The backend server acts as a necessary intermediary for API key management (Anthropic, Contentstack) and heavy processing (image manipulation).
*   Pay attention to the communication flow: `Side Panel UI -> Background Script -> Server API -> Anthropic/Contentstack`, and back. Also, `Content Script -> Background Script -> Side Panel UI`.
*   The server uses Contentstack tools, suggesting potential CMS integration features. 